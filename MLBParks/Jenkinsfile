// Jenkinsfile for MLBParks
// Create a slave
  podTemplate(
  label: "maven-slave-pod",
  inheritFrom: "maven",
  cloud: "openshift",
  containers: [
    containerTemplate(
      name: "jnlp",
      image: "docker-registry.default.svc:5000/${GUID}-jenkins/maven-slave-pod",
      resourceRequestMemory: "1Gi",
      resourceLimitMemory: "2Gi"
    )
  ]
) {
  node('maven-slave-pod') {

    def mvnCmd = "mvn -s ./nexus_settings.xml"

    stage('Checkout scm') {
      echo "Checking out Source Code"
      git url: 'https://github.com/robotobibok/OCP-adv-dev-workshop.git'
    }

    def groupId = getGroupIdFromPom("./MLBParks/pom.xml")
    def artifactId = getArtifactIdFromPom("./MLBParks/pom.xml")
    def version = getVersionFromPom("./MLBParks/pom.xml")

    def devTag = "${version}-${BUILD_NUMBER}"
    // Set the tag for the production image
    def prodTag = "${version}"

    // build the war file
    stage('Build app') {
      echo "Building version ${devTag}"
      sh "${mvnCmd} -f ./MLBParks/pom.xml clean package -DskipTests"
    }

    // run the unit tests
    stage('Run tests') {
      echo "Running Unit Tests"
      sh "${mvnCmd} -f ./MLBParks/pom.xml test"
    }

    // SonarQube code check
    stage('Inspect Code Quality') {
      echo "Running Code Analysis"
      sh "${mvnCmd} -f ./MLBParks/pom.xml sonar:sonar -Dsonar.host.url=http://sonarqube.${GUID}-sonarqube.svc.cluster.local:9000 -Dsonar.projectName=${JOB_BASE_NAME}-${devTag}"
    }

    // nexus save artifact
    stage('Publish Nexus Artifact') {
      echo "Publish to Nexus"
      sh "${mvnCmd} -f ./MLBParks/pom.xml deploy -DskipTests=true -DaltDeploymentRepository=nexus::default::http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases"
    }

    // Build image
    stage('Build and Tag OpenShift Image') {
    echo "Building OpenShift container image tasks:${devTag}"
    // Start Binary Build
    sh "oc start-build mlbparks --follow --from-file=http://nexus3.${GUID}-nexus.svc.cluster.local:8081/repository/releases/com/openshift/evg/roadshow/mlbparks/${version}/mlbparks-${version}.war -n ${GUID}-parks-dev"

    // Tag image using the devTag
    openshiftTag alias: 'false', destStream: 'mlbparks', destTag: devTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'mlbparks', srcTag: 'latest', verbose: 'false'
    }

    // Deploy to the development
    stage('Verify deploy in Dev') {
    echo "Deploying container image to Development Project"

    // Update the Image on the Development Deployment Config
    sh "oc set image dc/mlbparks mlbparks=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${devTag} -n ${GUID}-parks-dev"

    // Update the Config Map which contains the config for the mlbparks application
    sh "oc delete configmap mlbparks-config -n ${GUID}-parks-dev --ignore-not-found=true"

    sh "oc create configmap mlbparks-config \
                  --from-literal=APPNAME='MLB Parks (Dev)' \
                  --from-literal=DB_HOST=mongodb \
                  --from-literal=DB_NAME=mongodb \
                  --from-literal=DB_PASSWORD=mongodb \
                  --from-literal=DB_PORT=27017 \
                  --from-literal=DB_USERNAME=mongodb \
                  -n ${GUID}-parks-dev"

    sh "oc set env dc/mlbparks --from=configmap/mlbparks-config -n ${GUID}-parks-dev"

    // Deploy the development application
    openshiftDeploy depCfg: 'mlbparks', namespace: '${GUID}-parks-dev', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: 'mlbparks', namespace: '${GUID}-parks-dev', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: '${GUID}-parks-dev', svcName: 'mlbparks', verbose: 'false'
    }

    // Run Integration Tests in the Development Environment
    stage('Run Integration Tests') {
    echo "Running Integration Tests"

    // Waiting for Application
    sleep 40
    // Curl status of application with /wz/health/ URL
    sh "curl http://mlbparks.${GUID}-parks-dev.svc:8080/ws/healthz/ | grep -q 'OK'"
    // Curl endpoint to load data from application into backend database
    sh "curl http://mlbparks.${GUID}-parks-dev.svc:8080/ws/data/load/ | grep -q 'Items inserted in database: 30'"
    }

    // Copy Image to Nexus Docker Registry
    stage('Copy Image to Nexus Docker Registry') {
    echo "Copy image to Nexus Docker Registry"
    sh "skopeo copy --src-tls-verify=false --dest-tls-verify=false --src-creds openshift:\$(oc whoami -t) --dest-creds admin:admin123 docker://docker-registry.default.svc.cluster.local:5000/${GUID}-parks-dev/mlbparks:${devTag} docker://nexus-registry.${GUID}-nexus.svc:5000/mlbparks:${devTag}"

    // Tag the built image with the production tag
    openshiftTag alias: 'false', destStream: 'mlbparks', destTag: prodTag, destinationNamespace: '${GUID}-parks-dev', namespace: '${GUID}-parks-dev', srcStream: 'mlbparks', srcTag: devTag, verbose: 'false'
    }

    // Blue/Green Deployment into Production
    def destApp   = "mlbparks-green"
    def destcfgMap = "Green"
    def activeApp = ""

    stage('Blue/Green Production Deployment') {
    // Deploy the idle application alongside the active application
    activeApp = sh(returnStdout: true, script: "oc get route mlbparks -n ${GUID}-parks-prod -o jsonpath='{ .spec.to.name }'").trim()
    if (activeApp == "mlbparks-green") {
      destApp = "mlbparks-blue"
      destcfgMap = "Blue"
    }
    echo "Active Application:      " + activeApp
    echo "Destination Application: " + destApp
    echo "Config Map to be used:   " + destcfgMap

    // Update the Image on the Production Deployment Config
    sh "oc set image dc/${destApp} ${destApp}=docker-registry.default.svc:5000/${GUID}-parks-dev/mlbparks:${prodTag} -n ${GUID}-parks-prod"

    // Update the Config Map
    sh "oc delete configmap mlbparks-config -n ${GUID}-parks-prod --ignore-not-found=true"
    sh "oc create configmap mlbparks-config \
                  --from-literal=APPNAME='MLB Parks (${destcfgMap})' \
                  --from-literal=DB_HOST=mongodb \
                  --from-literal=DB_NAME=mongodb \
                  --from-literal=DB_PASSWORD=mongodb \
                  --from-literal=DB_PORT=27017 \
                  --from-literal=DB_USERNAME=mongodb \
                  -n ${GUID}-parks-prod"

    sh "oc set env dc/${destApp} --from=configmap/mlbparks-config -n ${GUID}-parks-prod"

    // Create the service so that the label selector is applied by the refresh of parksmap cache
    sh "oc expose dc ${destApp} --port 8080 --labels=type=parksmap-backend -n ${GUID}-parks-prod"

    // Deploy the inactive application
    openshiftDeploy depCfg: destApp, namespace: '${GUID}-parks-prod', verbose: 'false', waitTime: '', waitUnit: 'sec'
    openshiftVerifyDeployment depCfg: destApp, namespace: '${GUID}-parks-prod', replicaCount: '1', verbose: 'false', verifyReplicaCount: 'true', waitTime: '', waitUnit: 'sec'
    openshiftVerifyService namespace: '${GUID}-parks-prod', svcName: destApp, verbose: 'false'

    }

    stage('Switch route to new Version') {
    echo "Switching Production application to ${destApp}."
    sh 'oc patch route mlbparks -n ${GUID}-parks-prod -p \'{"spec":{"to":{"name":"' + destApp + '"}}}\''
    sh "oc delete svc ${activeApp} -n ${GUID}-parks-prod"
    }
  }
}

// Convenience Functions to read variables from the pom.xml
// --------------------------------------------------------
def getVersionFromPom(pom) {
  def matcher = readFile(pom) =~ '<version>(.+)</version>'
  matcher ? matcher[0][1] : null
}
def getGroupIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<groupId>(.+)</groupId>'
  matcher ? matcher[0][1] : null
}
def getArtifactIdFromPom(pom) {
  def matcher = readFile(pom) =~ '<artifactId>(.+)</artifactId>'
  matcher ? matcher[0][1] : null
}
